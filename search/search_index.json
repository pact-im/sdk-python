{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PactIM Python SDK For full documentation visit https://pact-im.github.io/sdk-python . Introduction Welcome to the Pact API! You can use our API as a single messaging API. You can view code examples in the dark area to the right. This API was designed by way Implement only required. Feel you free to contact with support if you are sure what make sense to append additional methods.","title":"Home"},{"location":"#welcome-to-pactim-python-sdk","text":"For full documentation visit https://pact-im.github.io/sdk-python .","title":"Welcome to PactIM Python SDK"},{"location":"#introduction","text":"Welcome to the Pact API! You can use our API as a single messaging API. You can view code examples in the dark area to the right. This API was designed by way Implement only required. Feel you free to contact with support if you are sure what make sense to append additional methods.","title":"Introduction"},{"location":"enums/","text":"Enums # Example from pact_im.schema import Provider ResponseStatus OK UPDATED CREATED DELETED SortDirection ASC DESC Method GET POST PUT DELETE Provider Avito WhatsApp WhatsAppBusiness Instagram Telegram TelegramPersonal Viber VK Facebook ChallengeType TWO_FACTOR ConfirmationType CODE PASSWORD","title":"Enums"},{"location":"enums/#enums","text":"# Example from pact_im.schema import Provider","title":"Enums"},{"location":"enums/#responsestatus","text":"OK UPDATED CREATED DELETED","title":"ResponseStatus"},{"location":"enums/#sortdirection","text":"ASC DESC","title":"SortDirection"},{"location":"enums/#method","text":"GET POST PUT DELETE","title":"Method"},{"location":"enums/#provider","text":"Avito WhatsApp WhatsAppBusiness Instagram Telegram TelegramPersonal Viber VK Facebook","title":"Provider"},{"location":"enums/#challengetype","text":"TWO_FACTOR","title":"ChallengeType"},{"location":"enums/#confirmationtype","text":"CODE PASSWORD","title":"ConfirmationType"},{"location":"errors/","text":"Errors The Pact API uses the following error codes: HTTP Status Meaning 400 Bad Request \u2013 Your request sucks 401 Unauthorized \u2013 Your API key is wrong 402 Payment Required \u2013 Paywoll enabled for the company, you must pay before doing API requests 403 Forbidden \u2013 The endpoint is unavailable for you 404 Not Found \u2013 The specified resource could not be found 405 Method Not Allowed \u2013 You tried to access with an invalid method 406 Not Acceptable \u2013 You requested a format that isn\u2019t json 410 Gone \u2013 The requested resource has been removed from our servers 418 I\u2019m a teapot 429 Too Many Requests \u2013 You\u2019re requesting too many requests! Slow down! 500 Internal Server Error \u2013 We had a problem with our server. Try again later. 502 Bad Gateway \u2013 We\u2019re temporarially offline for maintanance. Please try again later. 503 Service Unavailable \u2013 We\u2019re temporarially offline for maintanance. Please try again later.","title":"Errors"},{"location":"errors/#errors","text":"The Pact API uses the following error codes: HTTP Status Meaning 400 Bad Request \u2013 Your request sucks 401 Unauthorized \u2013 Your API key is wrong 402 Payment Required \u2013 Paywoll enabled for the company, you must pay before doing API requests 403 Forbidden \u2013 The endpoint is unavailable for you 404 Not Found \u2013 The specified resource could not be found 405 Method Not Allowed \u2013 You tried to access with an invalid method 406 Not Acceptable \u2013 You requested a format that isn\u2019t json 410 Gone \u2013 The requested resource has been removed from our servers 418 I\u2019m a teapot 429 Too Many Requests \u2013 You\u2019re requesting too many requests! Slow down! 500 Internal Server Error \u2013 We had a problem with our server. Try again later. 502 Bad Gateway \u2013 We\u2019re temporarially offline for maintanance. Please try again later. 503 Service Unavailable \u2013 We\u2019re temporarially offline for maintanance. Please try again later.","title":"Errors"},{"location":"getting-started/","text":"Getting started 5 easy steps for integration Signup here Get your API token in account settings Connect WhatsApp or Instagram or anything here Setup webhooks using this doc Try to send or receive message Installation pip install -U pact_im from pact_im import PactClient TOKEN = 'SecretToken' client = PactClient ( TOKEN )","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#5-easy-steps-for-integration","text":"Signup here Get your API token in account settings Connect WhatsApp or Instagram or anything here Setup webhooks using this doc Try to send or receive message","title":"5 easy steps for integration"},{"location":"getting-started/#installation","text":"pip install -U pact_im from pact_im import PactClient TOKEN = 'SecretToken' client = PactClient ( TOKEN )","title":"Installation"},{"location":"legal/","text":"Legal This API is in no way affiliated with, authorized, maintained, sponsored or endorsed by WhatsApp or any of its affiliates or subsidiaries Instagram or any of its affiliates or subsidiaries This is an independent and unofficial API. Use at your own risk.","title":"Legal"},{"location":"legal/#legal","text":"This API is in no way affiliated with, authorized, maintained, sponsored or endorsed by WhatsApp or any of its affiliates or subsidiaries Instagram or any of its affiliates or subsidiaries This is an independent and unofficial API. Use at your own risk.","title":"Legal"},{"location":"terms/","text":"Terms and conditions You will NOT use this API for spam, massive sending, etc. You will NOT use this API if you\u2019re NOT agree with these terms and conditions. We have the right to block any user of Pact.im API (without refund) if these conditions are not met.","title":"Terms and conditions"},{"location":"terms/#terms-and-conditions","text":"You will NOT use this API for spam, massive sending, etc. You will NOT use this API if you\u2019re NOT agree with these terms and conditions. We have the right to block any user of Pact.im API (without refund) if these conditions are not met.","title":"Terms and conditions"},{"location":"reference/attachment/","text":"Attachment attach_local_file ( self , company_id , conversation_id , file ) Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required file Union[str, IO] File Path or IO required Returns: Type Description Optional[int] Attachment External Id attach_remote_file ( self , company_id , conversation_id , url ) Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required url str File Url required Returns: Type Description Optional[int] Attachment External Id upload_file ( self , company_id , conversation_id , * , url = None , file = None ) \u0421reates an attachment which can be sent in message https://pact-im.github.io/api-doc/#upload-attachments Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required url str File url None file Union[str, IO] Path to file or IO None Returns: Type Description Optional[int] Attachment External Id","title":"Attachment"},{"location":"reference/attachment/#attachment","text":"","title":"Attachment"},{"location":"reference/attachment/#pact_im.services.attachment.AttachmentService.attach_local_file","text":"Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required file Union[str, IO] File Path or IO required Returns: Type Description Optional[int] Attachment External Id","title":"attach_local_file()"},{"location":"reference/attachment/#pact_im.services.attachment.AttachmentService.attach_remote_file","text":"Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required url str File Url required Returns: Type Description Optional[int] Attachment External Id","title":"attach_remote_file()"},{"location":"reference/attachment/#pact_im.services.attachment.AttachmentService.upload_file","text":"\u0421reates an attachment which can be sent in message https://pact-im.github.io/api-doc/#upload-attachments Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required url str File url None file Union[str, IO] Path to file or IO None Returns: Type Description Optional[int] Attachment External Id","title":"upload_file()"},{"location":"reference/channels/","text":"Channels confirm_channel_code ( self , company_id , channel_id , provider , ** parameters ) https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int ID of the company required channel_id int ID of the channel required provider Union[str, pact_im.schema.enums.Provider] Provider required parameters {} Returns: Type Description dict confirm_instagram_code ( self , company_id , channel_id , confirmation_code ) https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required confirmation_code str required Returns: Type Description dict confirm_instagram_two_factor_code ( self , company_id , channel_id , confirmation_code , confirmation_variant ) https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required confirmation_code str required confirmation_variant int required Returns: Type Description dict confirm_telegram_personal_code ( self , company_id , channel_id , code , confirmation_type ) This endpoint confirm telegram personal channel with two types: code, password Parameters: Name Type Description Default confirmation_type Union[str, pact_im.schema.enums.ConfirmationType] required company_id int ID of the company required channel_id int ID of the channel required code Union[str, int] Confirmation code required Returns: Type Description dict create_channel_by_token ( self , company_id , provider , token ) This method create a new channel in the company using token. https://pact-im.github.io/api-doc/#create-new-channel List of supported channels that can be created by token you can see in link above Parameters: Name Type Description Default company_id int Id of the company required provider Union[str, pact_im.schema.enums.Provider] (facebook, viber, vk, ...) required token str required Returns: Type Description Optional[int] create_channel_instagram ( self , company_id , login , password , sync_messages_from = None , sync_comments = None ) This method create a new channel for Instagram Parameters: Name Type Description Default company_id int Id of the company required login str Instagram login required password str Instagram password required sync_messages_from Optional[datetime.datetime] Only messages created after will be synchronized None sync_comments Optional[bool] None Returns: Type Description Optional[int] create_channel_unified ( self , company_id , provider , ** options ) Unified method that can create channel in company. https://pact-im.github.io/api-doc/#create-new-channel Note: You can connect only one channel per one company for each provider. Contact with support if you want to use more than one channel Parameters: Name Type Description Default company_id int Id of the company required provider Union[str, pact_im.schema.enums.Provider] Provider required options {} sync_messages_from Only messages created after sync_messages_from will be synchronized required do_not_mark_as_read Do not mark chats as read after synchronization required sync_comments required login required password required token required Returns: Type Description Optional[int] create_channel_whatsapp ( self , company_id , sync_messages_from = None , do_not_mark_as_read = None ) This method create a new channel for WhatsApp https://pact-im.github.io/api-doc/#create-new-channel Parameters: Name Type Description Default company_id int Id of the company required sync_messages_from Optional[datetime.datetime] Only messages created after will be synchronized None do_not_mark_as_read Optional[bool] Do not mark chats as read after synchronization None Returns: Type Description Optional[int] delete_channel ( self , company_id , channel_id ) Method deletes (disables) the channel https://pact-im.github.io/api-doc/#delete-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required Returns: Type Description PactResponse get_channels ( self , company_id , from_ = None , per = 50 , sort =< SortDirection . ASC : 'asc' > ) This method returns all the company channels https://pact-im.github.io/api-doc/#get-all-channels Parameters: Name Type Description Default company_id int Id of the company required from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 50 sort Union[str, pact_im.schema.enums.SortDirection] Change sorting direction (sorting by id). Avilable values: asc, desc. Default: asc. <SortDirection.ASC: 'asc'> Returns: Type Description ChannelList request_channel_code ( self , company_id , channel_id , provider , ** parameters ) https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required provider Union[str, pact_im.schema.enums.Provider] required parameters {} Returns: Type Description dict request_instagram_code ( self , company_id , channel_id , challenge_variant ) https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int ID of the company required channel_id int ID of the channel required challenge_variant int required Returns: Type Description dict request_instagram_two_factor_code ( self , company_id , channel_id , challenge_type =< ChallengeType . TWO_FACTOR : 'two_factor' > ) https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required Returns: Type Description dict request_telegram_personal_code ( self , company_id , channel_id ) This endpoint request code for telegram personal https://pact-im.github.io/api-doc/#request-code-telegram-personal Parameters: Name Type Description Default company_id int ID of the company required channel_id int ID of the channel required Returns: Type Description dict TelegramPersonalCodeResponse send_first_whatsapp_message ( self , company_id , channel_id , phone , message ) Send first message to whatsapp https://pact-im.github.io/api-doc/#how-to-write-first-message-to-whatsapp Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required phone str Phone required message str Message required Returns: Type Description MessageResponse send_whatsapp_template_message ( self , company_id , channel_id , phone , template_id , template_language , template_parameters ) Send first message to whatsapp (business) https://pact-im.github.io/api-doc/#how-to-write-first-message-to-whatsapp-business Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required phone str Phone required template_id str required template_language str required template_parameters dict required Returns: Type Description MessageResponse update_channel ( self , company_id , channel_id , query = None , ** options ) This method updates existing channel in the company https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default query Optional[pydantic.main.BaseModel] None company_id int Id of the company required channel_id int Id of the channel required options {} Returns: Type Description Optional[int] update_channel_instagram ( self , company_id , channel_id , login , password ) This method updates instagramm channel https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required login str Instagram login required password str Instagram password required Returns: Type Description Optional[int] update_channel_token ( self , company_id , channel_id , token ) This method updates channels that using tokens to auth https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required token str required Returns: Type Description Optional[int]","title":"Channels"},{"location":"reference/channels/#channels","text":"","title":"Channels"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.confirm_channel_code","text":"https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int ID of the company required channel_id int ID of the channel required provider Union[str, pact_im.schema.enums.Provider] Provider required parameters {} Returns: Type Description dict","title":"confirm_channel_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.confirm_instagram_code","text":"https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required confirmation_code str required Returns: Type Description dict","title":"confirm_instagram_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.confirm_instagram_two_factor_code","text":"https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required confirmation_code str required confirmation_variant int required Returns: Type Description dict","title":"confirm_instagram_two_factor_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.confirm_telegram_personal_code","text":"This endpoint confirm telegram personal channel with two types: code, password Parameters: Name Type Description Default confirmation_type Union[str, pact_im.schema.enums.ConfirmationType] required company_id int ID of the company required channel_id int ID of the channel required code Union[str, int] Confirmation code required Returns: Type Description dict","title":"confirm_telegram_personal_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.create_channel_by_token","text":"This method create a new channel in the company using token. https://pact-im.github.io/api-doc/#create-new-channel List of supported channels that can be created by token you can see in link above Parameters: Name Type Description Default company_id int Id of the company required provider Union[str, pact_im.schema.enums.Provider] (facebook, viber, vk, ...) required token str required Returns: Type Description Optional[int]","title":"create_channel_by_token()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.create_channel_instagram","text":"This method create a new channel for Instagram Parameters: Name Type Description Default company_id int Id of the company required login str Instagram login required password str Instagram password required sync_messages_from Optional[datetime.datetime] Only messages created after will be synchronized None sync_comments Optional[bool] None Returns: Type Description Optional[int]","title":"create_channel_instagram()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.create_channel_unified","text":"Unified method that can create channel in company. https://pact-im.github.io/api-doc/#create-new-channel Note: You can connect only one channel per one company for each provider. Contact with support if you want to use more than one channel Parameters: Name Type Description Default company_id int Id of the company required provider Union[str, pact_im.schema.enums.Provider] Provider required options {} sync_messages_from Only messages created after sync_messages_from will be synchronized required do_not_mark_as_read Do not mark chats as read after synchronization required sync_comments required login required password required token required Returns: Type Description Optional[int]","title":"create_channel_unified()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.create_channel_whatsapp","text":"This method create a new channel for WhatsApp https://pact-im.github.io/api-doc/#create-new-channel Parameters: Name Type Description Default company_id int Id of the company required sync_messages_from Optional[datetime.datetime] Only messages created after will be synchronized None do_not_mark_as_read Optional[bool] Do not mark chats as read after synchronization None Returns: Type Description Optional[int]","title":"create_channel_whatsapp()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.delete_channel","text":"Method deletes (disables) the channel https://pact-im.github.io/api-doc/#delete-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required Returns: Type Description PactResponse","title":"delete_channel()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.get_channels","text":"This method returns all the company channels https://pact-im.github.io/api-doc/#get-all-channels Parameters: Name Type Description Default company_id int Id of the company required from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 50 sort Union[str, pact_im.schema.enums.SortDirection] Change sorting direction (sorting by id). Avilable values: asc, desc. Default: asc. <SortDirection.ASC: 'asc'> Returns: Type Description ChannelList","title":"get_channels()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.request_channel_code","text":"https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required provider Union[str, pact_im.schema.enums.Provider] required parameters {} Returns: Type Description dict","title":"request_channel_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.request_instagram_code","text":"https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int ID of the company required channel_id int ID of the channel required challenge_variant int required Returns: Type Description dict","title":"request_instagram_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.request_instagram_two_factor_code","text":"https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required Returns: Type Description dict","title":"request_instagram_two_factor_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.request_telegram_personal_code","text":"This endpoint request code for telegram personal https://pact-im.github.io/api-doc/#request-code-telegram-personal Parameters: Name Type Description Default company_id int ID of the company required channel_id int ID of the channel required Returns: Type Description dict TelegramPersonalCodeResponse","title":"request_telegram_personal_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.send_first_whatsapp_message","text":"Send first message to whatsapp https://pact-im.github.io/api-doc/#how-to-write-first-message-to-whatsapp Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required phone str Phone required message str Message required Returns: Type Description MessageResponse","title":"send_first_whatsapp_message()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.send_whatsapp_template_message","text":"Send first message to whatsapp (business) https://pact-im.github.io/api-doc/#how-to-write-first-message-to-whatsapp-business Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required phone str Phone required template_id str required template_language str required template_parameters dict required Returns: Type Description MessageResponse","title":"send_whatsapp_template_message()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.update_channel","text":"This method updates existing channel in the company https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default query Optional[pydantic.main.BaseModel] None company_id int Id of the company required channel_id int Id of the channel required options {} Returns: Type Description Optional[int]","title":"update_channel()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.update_channel_instagram","text":"This method updates instagramm channel https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required login str Instagram login required password str Instagram password required Returns: Type Description Optional[int]","title":"update_channel_instagram()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.update_channel_token","text":"This method updates channels that using tokens to auth https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required token str required Returns: Type Description Optional[int]","title":"update_channel_token()"},{"location":"reference/companies/","text":"Companies create_company ( self , name , phone = None , description = None , webhook_url = None ) This method creates a new company for user :param name: Company name Parameters: Name Type Description Default phone Optional[str] Official company phone number of contact person None description Optional[str] Company description None webhook_url Optional[str] Endpoint for webhooks None Returns: Type Description Optional[int] Exceptions: Type Description exceptions.ApiCallException Api call error get_companies ( self , from_ = None , per = 50 , sort =< SortDirection . ASC : 'asc' > ) This method return list of all user companies Parameters: Name Type Description Default from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 50 sort Union[str, pact_im.schema.enums.SortDirection] Change sorting direction. Available values: asc, desc. Default: asc <SortDirection.ASC: 'asc'> Returns: Type Description CompaniesList Exceptions: Type Description exceptions.ApiCallException Api call error update_company ( self , external_id , name = None , phone = None , description = None , webhook_url = None , hidden = None ) This method updates specific company attributes If you want to receive webhooks make sure that webhook_url is present. Webhook url must be valid and response code on POST json-request {'source':'pact.im', 'operation':'test'} must be 200 Parameters: Name Type Description Default external_id int Id of the company for update required name Optional[str] Company name None phone Optional[str] Official company phone number of contact person None description Optional[str] Company description None webhook_url Optional[str] Endpoint for webhooks None hidden Optional[bool] Hide/Show a company in the Pact web ivnterface None Returns: Type Description Optional[int] Exceptions: Type Description exceptions.ApiCallException Api call error","title":"Companies"},{"location":"reference/companies/#companies","text":"","title":"Companies"},{"location":"reference/companies/#pact_im.services.companies.CompaniesService.create_company","text":"This method creates a new company for user :param name: Company name Parameters: Name Type Description Default phone Optional[str] Official company phone number of contact person None description Optional[str] Company description None webhook_url Optional[str] Endpoint for webhooks None Returns: Type Description Optional[int] Exceptions: Type Description exceptions.ApiCallException Api call error","title":"create_company()"},{"location":"reference/companies/#pact_im.services.companies.CompaniesService.get_companies","text":"This method return list of all user companies Parameters: Name Type Description Default from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 50 sort Union[str, pact_im.schema.enums.SortDirection] Change sorting direction. Available values: asc, desc. Default: asc <SortDirection.ASC: 'asc'> Returns: Type Description CompaniesList Exceptions: Type Description exceptions.ApiCallException Api call error","title":"get_companies()"},{"location":"reference/companies/#pact_im.services.companies.CompaniesService.update_company","text":"This method updates specific company attributes If you want to receive webhooks make sure that webhook_url is present. Webhook url must be valid and response code on POST json-request {'source':'pact.im', 'operation':'test'} must be 200 Parameters: Name Type Description Default external_id int Id of the company for update required name Optional[str] Company name None phone Optional[str] Official company phone number of contact person None description Optional[str] Company description None webhook_url Optional[str] Endpoint for webhooks None hidden Optional[bool] Hide/Show a company in the Pact web ivnterface None Returns: Type Description Optional[int] Exceptions: Type Description exceptions.ApiCallException Api call error","title":"update_company()"},{"location":"reference/conversations/","text":"Conversation create_conversation ( self , company_id , phone , provider =< Provider . WhatsApp : 'whatsapp' > ) Creates new conversation This endpoint creates conversation in the company https://pact-im.github.io/api-doc/#create-new-conversation Parameters: Name Type Description Default company_id int ID of the company required phone str Phone required provider Union[str, pact_im.schema.enums.Provider] Provider <Provider.WhatsApp: 'whatsapp'> Returns: Type Description ConversationResponse get_conversations ( self , company_id , from_ = None , per = 50 , sort =< SortDirection . ASC : 'asc' > ) Gets all conversations https://pact-im.github.io/api-doc/#get-all-conversations Parameters: Name Type Description Default company_id int ID of the company required from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 50 sort Union[str, pact_im.schema.enums.SortDirection] We sort results by id. Change sorting direction. Avilable values: asc, desc <SortDirection.ASC: 'asc'> Returns: Type Description ConversationList get_detail ( self , company_id , conversation_id ) Retrieves conversation details from server https://pact-im.github.io/api-doc/#get-conversation-details Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required Returns: Type Description ConversationResponse Conversation Detail update_assignee ( self , company_id , conversation_id , assignee_id ) Update assignee for conversation This endpoint update assignee of conversation in the company using whatsapp channel https://pact-im.github.io/api-doc/#update-assignee-for-conversation Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required assignee_id int User id required Returns: Type Description Optional[int] Conversation External ID","title":"Conversations"},{"location":"reference/conversations/#conversation","text":"","title":"Conversation"},{"location":"reference/conversations/#pact_im.services.conversations.ConversationsService.create_conversation","text":"Creates new conversation This endpoint creates conversation in the company https://pact-im.github.io/api-doc/#create-new-conversation Parameters: Name Type Description Default company_id int ID of the company required phone str Phone required provider Union[str, pact_im.schema.enums.Provider] Provider <Provider.WhatsApp: 'whatsapp'> Returns: Type Description ConversationResponse","title":"create_conversation()"},{"location":"reference/conversations/#pact_im.services.conversations.ConversationsService.get_conversations","text":"Gets all conversations https://pact-im.github.io/api-doc/#get-all-conversations Parameters: Name Type Description Default company_id int ID of the company required from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 50 sort Union[str, pact_im.schema.enums.SortDirection] We sort results by id. Change sorting direction. Avilable values: asc, desc <SortDirection.ASC: 'asc'> Returns: Type Description ConversationList","title":"get_conversations()"},{"location":"reference/conversations/#pact_im.services.conversations.ConversationsService.get_detail","text":"Retrieves conversation details from server https://pact-im.github.io/api-doc/#get-conversation-details Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required Returns: Type Description ConversationResponse Conversation Detail","title":"get_detail()"},{"location":"reference/conversations/#pact_im.services.conversations.ConversationsService.update_assignee","text":"Update assignee for conversation This endpoint update assignee of conversation in the company using whatsapp channel https://pact-im.github.io/api-doc/#update-assignee-for-conversation Parameters: Name Type Description Default company_id int ID of the company required conversation_id int ID of the conversation required assignee_id int User id required Returns: Type Description Optional[int] Conversation External ID","title":"update_assignee()"},{"location":"reference/jobs/","text":"Jobs get_job ( self , company_id , channel_id , job_id ) This method return info about message delivery job https://pact-im.github.io/api-doc/?shell#message-delivery-jobs Parameters: Name Type Description Default company_id int ID of the company required channel_id int iD of the channel required job_id int Job ID required Returns: Type Description MessageResponse","title":"Jobs"},{"location":"reference/jobs/#jobs","text":"","title":"Jobs"},{"location":"reference/jobs/#pact_im.services.jobs.JobsService.get_job","text":"This method return info about message delivery job https://pact-im.github.io/api-doc/?shell#message-delivery-jobs Parameters: Name Type Description Default company_id int ID of the company required channel_id int iD of the channel required job_id int Job ID required Returns: Type Description MessageResponse","title":"get_job()"},{"location":"reference/messages/","text":"Messages get_messages ( self , company_id , conversation_id , from_ = None , per = None , sort = None ) Get conversation messages https://pact-im.github.io/api-doc/#get-conversation-messages Parameters: Name Type Description Default company_id int required conversation_id int required from_ Optional[int] None per Optional[int] None sort Union[str, pact_im.schema.enums.SortDirection] None Returns: Type Description MessageList send_message ( self , company_id , conversation_id , message = None , attachments = None ) Send message and/or attachments https://pact-im.github.io/api-doc/#send-message Parameters: Name Type Description Default company_id int required conversation_id int required message Optional[str] None attachments Union[List[int], int] attachments ids None Returns: Type Description MessageResponse","title":"Messages"},{"location":"reference/messages/#messages","text":"","title":"Messages"},{"location":"reference/messages/#pact_im.services.messages.MessagesService.get_messages","text":"Get conversation messages https://pact-im.github.io/api-doc/#get-conversation-messages Parameters: Name Type Description Default company_id int required conversation_id int required from_ Optional[int] None per Optional[int] None sort Union[str, pact_im.schema.enums.SortDirection] None Returns: Type Description MessageList","title":"get_messages()"},{"location":"reference/messages/#pact_im.services.messages.MessagesService.send_message","text":"Send message and/or attachments https://pact-im.github.io/api-doc/#send-message Parameters: Name Type Description Default company_id int required conversation_id int required message Optional[str] None attachments Union[List[int], int] attachments ids None Returns: Type Description MessageResponse","title":"send_message()"},{"location":"reference/service_messages/","text":"Service Messages","title":"Service Messages"},{"location":"reference/service_messages/#service-messages","text":"","title":"Service Messages"},{"location":"using/channels/","text":"Channels Get channels from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . channels . get_channels ( company_id = 1 ) for channel in response . channels : print ( channel . external_id , channel . provider ) Create new channel You can connect only one channel per one company for each provider. Contact with support if you want to use more than one channel import datetime from pact_im import PactClient from pact_im.schema import Provider client = PactClient ( 'SecretToken' ) external_id = client . channels . create_channel_unified ( company_id = 1 , provider = Provider . WhatsApp ) external_id_another = client . channels . create_channel_whatsapp ( company_id = 2 , sync_messages_from = datetime . datetime ( 2021 , 1 , 1 ) ) Update channel For instagram channel from pact_im import PactClient client = PactClient ( 'SecretToken' ) external_id = client . channels . update_channel_instagram ( company_id = 1 , channel_id = 1 , login = 'some_login' , password = 'some_password' ) For facebook/vkontakte/vkontakte_direct/telegram/viber channels from pact_im import PactClient client = PactClient ( 'SecretToken' ) # For instagram channel external_id = client . channels . update_channel_token ( company_id = 1 , channel_id = 1 , token = 'some_token' ) Delete channel from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . channels . delete_channel ( company_id = 1 , channel_id = 2 ) print ( response . is_success ()) Telegram Personal Request code from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . request_telegram_personal_code ( company_id = 1 , channel_id = 2 ) print ( response ) Example Response { \"code_length\" : 6 , \"code_type\" : \"app\" , \"expires_in\" : 60 , \"next_type\" : \"app\" , \"session_id\" : 1337 , \"status\" : \"ok\" } Confirm Code from pact_im import PactClient from pact_im.schema import ConfirmationType client = PactClient ( 'SecretToken' ) response : dict = client . channels . confirm_telegram_personal_code ( company_id = 1 , channel_id = 1 , code = 'some_code' , confirmation_type = ConfirmationType . CODE ) print ( response ) Example Response { \"result\" : \"ok\" , \"state\" : \"enabled\" } Instagram Request code from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . request_instagram_code ( company_id = 1 , channel_id = 2 , challenge_variant = 0 ) print ( response ) Example Response { \"result\" : \"ok\" } Request two factor SMS authentication code from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . request_instagram_two_factor_code ( company_id = 1 , channel_id = 2 ) print ( response ) Example Response { \"result\" : \"ok\" } Confirm code from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . confirm_instagram_code ( company_id = 1 , channel_id = 2 , confirmation_code = 'some_code' ) print ( response ) Example Response { \"result\" : \"ok\" } Confirm two factor authentication code from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . confirm_instagram_two_factor_code ( company_id = 1 , channel_id = 2 , confirmation_code = 'some_code' , confirmation_variant = 1 ) print ( response ) Example Response { \"result\" : \"ok\" } How to write first message to Whatsapp Whatsapp requires using this method to write the first message. from pact_im import PactClient from pact_im.schema.messages import MessageResponse client = PactClient ( 'SecretToken' ) response : MessageResponse = client . channels . send_first_whatsapp_message ( company_id = 1 , channel_id = 2 , phone = '79999999999' , message = 'Some text message' ) print ( response ) How to write first message to Whatsapp Business This endpoint provides an ability to create conversation with a client in whatsapp channel. When you execute this request we will add a job for delivery. We will send webhook when the operation is complete or failed. You can also poll delivery status here: Jobs Whatsapp business requires using this method to write the first message. from pact_im import PactClient from pact_im.schema.messages import MessageResponse client = PactClient ( 'SecretToken' ) response : MessageResponse = client . channels . send_whatsapp_template_message ( company_id = 1 , channel_id = 2 , phone = '79999999999' , template_id = 111 , template_language = 'ru' ) print ( response )","title":"Channels"},{"location":"using/channels/#channels","text":"","title":"Channels"},{"location":"using/channels/#get-channels","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . channels . get_channels ( company_id = 1 ) for channel in response . channels : print ( channel . external_id , channel . provider )","title":"Get channels"},{"location":"using/channels/#create-new-channel","text":"You can connect only one channel per one company for each provider. Contact with support if you want to use more than one channel import datetime from pact_im import PactClient from pact_im.schema import Provider client = PactClient ( 'SecretToken' ) external_id = client . channels . create_channel_unified ( company_id = 1 , provider = Provider . WhatsApp ) external_id_another = client . channels . create_channel_whatsapp ( company_id = 2 , sync_messages_from = datetime . datetime ( 2021 , 1 , 1 ) )","title":"Create new channel"},{"location":"using/channels/#update-channel","text":"For instagram channel from pact_im import PactClient client = PactClient ( 'SecretToken' ) external_id = client . channels . update_channel_instagram ( company_id = 1 , channel_id = 1 , login = 'some_login' , password = 'some_password' ) For facebook/vkontakte/vkontakte_direct/telegram/viber channels from pact_im import PactClient client = PactClient ( 'SecretToken' ) # For instagram channel external_id = client . channels . update_channel_token ( company_id = 1 , channel_id = 1 , token = 'some_token' )","title":"Update channel"},{"location":"using/channels/#delete-channel","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . channels . delete_channel ( company_id = 1 , channel_id = 2 ) print ( response . is_success ())","title":"Delete channel"},{"location":"using/channels/#telegram-personal","text":"","title":"Telegram Personal"},{"location":"using/channels/#request-code","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . request_telegram_personal_code ( company_id = 1 , channel_id = 2 ) print ( response )","title":"Request code"},{"location":"using/channels/#example-response","text":"{ \"code_length\" : 6 , \"code_type\" : \"app\" , \"expires_in\" : 60 , \"next_type\" : \"app\" , \"session_id\" : 1337 , \"status\" : \"ok\" }","title":"Example Response"},{"location":"using/channels/#confirm-code","text":"from pact_im import PactClient from pact_im.schema import ConfirmationType client = PactClient ( 'SecretToken' ) response : dict = client . channels . confirm_telegram_personal_code ( company_id = 1 , channel_id = 1 , code = 'some_code' , confirmation_type = ConfirmationType . CODE ) print ( response )","title":"Confirm Code"},{"location":"using/channels/#example-response_1","text":"{ \"result\" : \"ok\" , \"state\" : \"enabled\" }","title":"Example Response"},{"location":"using/channels/#instagram","text":"","title":"Instagram"},{"location":"using/channels/#request-code_1","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . request_instagram_code ( company_id = 1 , channel_id = 2 , challenge_variant = 0 ) print ( response )","title":"Request code"},{"location":"using/channels/#example-response_2","text":"{ \"result\" : \"ok\" }","title":"Example Response"},{"location":"using/channels/#request-two-factor-sms-authentication-code","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . request_instagram_two_factor_code ( company_id = 1 , channel_id = 2 ) print ( response )","title":"Request two factor SMS authentication code"},{"location":"using/channels/#example-response_3","text":"{ \"result\" : \"ok\" }","title":"Example Response"},{"location":"using/channels/#confirm-code_1","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . confirm_instagram_code ( company_id = 1 , channel_id = 2 , confirmation_code = 'some_code' ) print ( response )","title":"Confirm code"},{"location":"using/channels/#example-response_4","text":"{ \"result\" : \"ok\" }","title":"Example Response"},{"location":"using/channels/#confirm-two-factor-authentication-code","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response : dict = client . channels . confirm_instagram_two_factor_code ( company_id = 1 , channel_id = 2 , confirmation_code = 'some_code' , confirmation_variant = 1 ) print ( response )","title":"Confirm two factor authentication code"},{"location":"using/channels/#example-response_5","text":"{ \"result\" : \"ok\" }","title":"Example Response"},{"location":"using/channels/#how-to-write-first-message-to-whatsapp","text":"Whatsapp requires using this method to write the first message. from pact_im import PactClient from pact_im.schema.messages import MessageResponse client = PactClient ( 'SecretToken' ) response : MessageResponse = client . channels . send_first_whatsapp_message ( company_id = 1 , channel_id = 2 , phone = '79999999999' , message = 'Some text message' ) print ( response )","title":"How to write first message to Whatsapp"},{"location":"using/channels/#how-to-write-first-message-to-whatsapp-business","text":"This endpoint provides an ability to create conversation with a client in whatsapp channel. When you execute this request we will add a job for delivery. We will send webhook when the operation is complete or failed. You can also poll delivery status here: Jobs Whatsapp business requires using this method to write the first message. from pact_im import PactClient from pact_im.schema.messages import MessageResponse client = PactClient ( 'SecretToken' ) response : MessageResponse = client . channels . send_whatsapp_template_message ( company_id = 1 , channel_id = 2 , phone = '79999999999' , template_id = 111 , template_language = 'ru' ) print ( response )","title":"How to write first message to Whatsapp Business"},{"location":"using/companies/","text":"Companies Get companies from pact_im import PactClient client = PactClient ( 'SecretToken' ) companies_result = client . companies . get_companies ( per = 100 ) for company in companies_result . companies : print ( company . name , company . description ) Update company from pact_im import PactClient client = PactClient ( 'SecretToken' ) updated_external_id = client . companies . update_company ( external_id = 1 , name = 'NewName' , description = 'NewDescription' ) Create new company If you want to receive webhooks make sure that webhook_url is present. Webhook url must be valid and response code on POST json-request {'source':'pact.im', 'operation':'test'} must be 200 from pact_im import PactClient client = PactClient ( 'SecretToken' ) created_external_id = client . companies . create_company ( name = 'MyCompany' , description = 'company description' , phone = '79250001122' , webhook_url = 'https://example.com' )","title":"Companies"},{"location":"using/companies/#companies","text":"","title":"Companies"},{"location":"using/companies/#get-companies","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) companies_result = client . companies . get_companies ( per = 100 ) for company in companies_result . companies : print ( company . name , company . description )","title":"Get companies"},{"location":"using/companies/#update-company","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) updated_external_id = client . companies . update_company ( external_id = 1 , name = 'NewName' , description = 'NewDescription' )","title":"Update company"},{"location":"using/companies/#create-new-company","text":"If you want to receive webhooks make sure that webhook_url is present. Webhook url must be valid and response code on POST json-request {'source':'pact.im', 'operation':'test'} must be 200 from pact_im import PactClient client = PactClient ( 'SecretToken' ) created_external_id = client . companies . create_company ( name = 'MyCompany' , description = 'company description' , phone = '79250001122' , webhook_url = 'https://example.com' )","title":"Create new company"},{"location":"using/conversations/","text":"Conversation Get All Conversations from pact_im import PactClient client = PactClient ( 'SecretToken' ) conversations_result = client . conversations . get_conversations ( company_id = 1 , per = 100 ) for conversation in conversations_result . conversations : print ( conversation . name ) Create new conversation This endpoint creates conversation in the company using whatsapp channel. If you have a whatsapp_business provider, use a different method to create conversation using a template Create first message for whatsapp business provider from pact_im import PactClient from pact_im.schema import Provider client = PactClient ( 'SecretToken' ) response = client . conversations . create_conversation ( company_id = 1 , provider = Provider . WhatsApp , phone = '79250000001' ) print ( response . conversation . external_id ) Example Response { \"status\" : \"ok\" , \"data\" :{ \"conversation\" :{ \"external_id\" : 1 , \"name\" : \"79250000001\" , \"channel_id\" : 1 , \"channel_type\" : \"whatsapp\" , \"created_at\" : \"2017-11-11T10:17:10.655Z\" , \"created_at_timestamp\" : 1603119600 , \"avatar\" : \"/avatars/original/missing.png\" , \"sender_external_id\" : \"79250000001\" , \"meta\" :{ } } } } Get conversation details from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . conversations . get_detail ( company_id = 1 , conversation_id = 1 ) print ( response . conversation . external_id ) Example Response { \"status\" : \"ok\" , \"data\" :{ \"conversation\" :{ \"external_id\" : 1 , \"name\" : \"79250000001\" , \"channel_id\" : 1 , \"channel_type\" : \"whatsapp\" , \"created_at\" : \"2017-11-11T10:17:10.655Z\" , \"created_at_timestamp\" : 1603119600 , \"avatar\" : \"/avatars/original/missing.png\" , \"sender_external_id\" : \"79250000001\" , \"meta\" :{ } } } } Update assignee for conversation Update assignee for conversation from pact_im import PactClient client = PactClient ( 'SecretToken' ) conversation_external_id = client . conversations . update_assignee ( company_id = 1 , conversation_id = 1 , assignee_id = 1 ) print ( conversation_external_id ) Upload attachment for message import os.path from pact_im import PactClient client = PactClient ( 'SecretToken' ) file_path = os . path . join ( 'tmp' , 'image.png' ) file_url = 'https://en.wikipedia.org/wiki/Altai_Republic#/media/File:Katun.jpg' # Local File response_attach_external_id = client . attachment . upload_file ( company_id = 1 , conversation_id = 1 , file = file_path ) # File url another_attach_external_id = client . attachment . upload_file ( company_id = 1 , conversation_id = 1 , url = file_url ) messages = client . messages . send_message ( company_id = 1 , conversation_id = 1 , message = 'Some text' , attachments = response_attach_external_id # or list(response_attach_external_id, another_attach_external_id) ) Whatsapp requires using this method with existing whatsapp business template","title":"Conversations"},{"location":"using/conversations/#conversation","text":"","title":"Conversation"},{"location":"using/conversations/#get-all-conversations","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) conversations_result = client . conversations . get_conversations ( company_id = 1 , per = 100 ) for conversation in conversations_result . conversations : print ( conversation . name )","title":"Get All Conversations"},{"location":"using/conversations/#create-new-conversation","text":"This endpoint creates conversation in the company using whatsapp channel. If you have a whatsapp_business provider, use a different method to create conversation using a template Create first message for whatsapp business provider from pact_im import PactClient from pact_im.schema import Provider client = PactClient ( 'SecretToken' ) response = client . conversations . create_conversation ( company_id = 1 , provider = Provider . WhatsApp , phone = '79250000001' ) print ( response . conversation . external_id )","title":"Create new conversation"},{"location":"using/conversations/#example-response","text":"{ \"status\" : \"ok\" , \"data\" :{ \"conversation\" :{ \"external_id\" : 1 , \"name\" : \"79250000001\" , \"channel_id\" : 1 , \"channel_type\" : \"whatsapp\" , \"created_at\" : \"2017-11-11T10:17:10.655Z\" , \"created_at_timestamp\" : 1603119600 , \"avatar\" : \"/avatars/original/missing.png\" , \"sender_external_id\" : \"79250000001\" , \"meta\" :{ } } } }","title":"Example Response"},{"location":"using/conversations/#get-conversation-details","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . conversations . get_detail ( company_id = 1 , conversation_id = 1 ) print ( response . conversation . external_id )","title":"Get conversation details"},{"location":"using/conversations/#example-response_1","text":"{ \"status\" : \"ok\" , \"data\" :{ \"conversation\" :{ \"external_id\" : 1 , \"name\" : \"79250000001\" , \"channel_id\" : 1 , \"channel_type\" : \"whatsapp\" , \"created_at\" : \"2017-11-11T10:17:10.655Z\" , \"created_at_timestamp\" : 1603119600 , \"avatar\" : \"/avatars/original/missing.png\" , \"sender_external_id\" : \"79250000001\" , \"meta\" :{ } } } }","title":"Example Response"},{"location":"using/conversations/#update-assignee-for-conversation","text":"Update assignee for conversation from pact_im import PactClient client = PactClient ( 'SecretToken' ) conversation_external_id = client . conversations . update_assignee ( company_id = 1 , conversation_id = 1 , assignee_id = 1 ) print ( conversation_external_id )","title":"Update assignee for conversation"},{"location":"using/conversations/#upload-attachment-for-message","text":"import os.path from pact_im import PactClient client = PactClient ( 'SecretToken' ) file_path = os . path . join ( 'tmp' , 'image.png' ) file_url = 'https://en.wikipedia.org/wiki/Altai_Republic#/media/File:Katun.jpg' # Local File response_attach_external_id = client . attachment . upload_file ( company_id = 1 , conversation_id = 1 , file = file_path ) # File url another_attach_external_id = client . attachment . upload_file ( company_id = 1 , conversation_id = 1 , url = file_url ) messages = client . messages . send_message ( company_id = 1 , conversation_id = 1 , message = 'Some text' , attachments = response_attach_external_id # or list(response_attach_external_id, another_attach_external_id) ) Whatsapp requires using this method with existing whatsapp business template","title":"Upload attachment for message"},{"location":"using/jobs/","text":"Jobs Get job detail This method return info about message delivery job from pact_im import PactClient from pact_im.schema.messages import MessageResponse client = PactClient ( 'SecretToken' ) response : MessageResponse = client . jobs . get_job ( company_id = 1 , channel_id = 1 , job_id = 1 ) if response . is_delivered : print ( 'Good' )","title":"Jobs"},{"location":"using/jobs/#jobs","text":"","title":"Jobs"},{"location":"using/jobs/#get-job-detail","text":"This method return info about message delivery job from pact_im import PactClient from pact_im.schema.messages import MessageResponse client = PactClient ( 'SecretToken' ) response : MessageResponse = client . jobs . get_job ( company_id = 1 , channel_id = 1 , job_id = 1 ) if response . is_delivered : print ( 'Good' )","title":"Get job detail"},{"location":"using/messages/","text":"Messages Each message belongs to conversation. Message fields: id (Integer) channel_type (String) \u2013 whatsapp, instagram, etc.. message (String) \u2013 message body income (Boolean) \u2013 whether message is income or outcome Get conversation messages from pact_im import PactClient client = PactClient ( 'SecretToken' ) messages_response = client . messages . get_messages ( company_id = 1 , conversation_id = 1 ) for message in messages_response . messages : print ( message . external_id ) Send message This endpoint delivers message to the client under specified conversation. There are two delivery modes: synchronous and asyncronous . If message_id field in response is null or empty \u2013 it means asyncronous delivery. You\u2019ll receive a webhook with the delivery status if delivery is async. You can check operation result manually here: Jobs from pact_im import PactClient from pact_im.schema.messages import MessageResponse client = PactClient ( 'SecretToken' ) message_response : MessageResponse = client . messages . send_message ( company_id = 1 , conversation_id = 1 , message = 'Hello' ) print ( message_response . message_id ) Important : Some messengers support only text or only attachment in one message. For example, whatsapp allows to attach a caption for an image but not allows to attach a caption to a PDF document. Multiple attachments are allowed only for vkontakte","title":"Messages"},{"location":"using/messages/#messages","text":"Each message belongs to conversation. Message fields: id (Integer) channel_type (String) \u2013 whatsapp, instagram, etc.. message (String) \u2013 message body income (Boolean) \u2013 whether message is income or outcome","title":"Messages"},{"location":"using/messages/#get-conversation-messages","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) messages_response = client . messages . get_messages ( company_id = 1 , conversation_id = 1 ) for message in messages_response . messages : print ( message . external_id )","title":"Get conversation messages"},{"location":"using/messages/#send-message","text":"This endpoint delivers message to the client under specified conversation. There are two delivery modes: synchronous and asyncronous . If message_id field in response is null or empty \u2013 it means asyncronous delivery. You\u2019ll receive a webhook with the delivery status if delivery is async. You can check operation result manually here: Jobs from pact_im import PactClient from pact_im.schema.messages import MessageResponse client = PactClient ( 'SecretToken' ) message_response : MessageResponse = client . messages . send_message ( company_id = 1 , conversation_id = 1 , message = 'Hello' ) print ( message_response . message_id ) Important : Some messengers support only text or only attachment in one message. For example, whatsapp allows to attach a caption for an image but not allows to attach a caption to a PDF document. Multiple attachments are allowed only for vkontakte","title":"Send message"},{"location":"using/service_messages/","text":"Service Messages","title":"Service Messages"},{"location":"using/service_messages/#service-messages","text":"","title":"Service Messages"}]}