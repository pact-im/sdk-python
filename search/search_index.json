{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PactIM Python SDK For full documentation visit https://pact-im.github.io/sdk-python . Introduction Welcome to the Pact API! You can use our API as a single messaging API. You can view code examples in the dark area to the right. This API was designed by way Implement only required. Feel you free to contact with support if you are sure what make sense to append additional methods.","title":"Home"},{"location":"#welcome-to-pactim-python-sdk","text":"For full documentation visit https://pact-im.github.io/sdk-python .","title":"Welcome to PactIM Python SDK"},{"location":"#introduction","text":"Welcome to the Pact API! You can use our API as a single messaging API. You can view code examples in the dark area to the right. This API was designed by way Implement only required. Feel you free to contact with support if you are sure what make sense to append additional methods.","title":"Introduction"},{"location":"enums/","text":"Enums # Example from pact_im.schema import Provider ResponseStatus OK UPDATED CREATED DELETED SortDirection ASC DESC Method GET POST PUT DELETE Provider Avito WhatsApp WhatsAppBusiness Instagram Telegram Viber VK Facebook ChallengeType TWO_FACTOR","title":"Enums"},{"location":"enums/#enums","text":"# Example from pact_im.schema import Provider","title":"Enums"},{"location":"enums/#responsestatus","text":"OK UPDATED CREATED DELETED","title":"ResponseStatus"},{"location":"enums/#sortdirection","text":"ASC DESC","title":"SortDirection"},{"location":"enums/#method","text":"GET POST PUT DELETE","title":"Method"},{"location":"enums/#provider","text":"Avito WhatsApp WhatsAppBusiness Instagram Telegram Viber VK Facebook","title":"Provider"},{"location":"enums/#challengetype","text":"TWO_FACTOR","title":"ChallengeType"},{"location":"getting-started/","text":"Getting started 5 easy steps for integration Signup here Get your API token in account settings Connect WhatsApp or Instagram or anything here Setup webhooks using this doc Try to send or receive message Installation pip install -U pact_im from pact_im import PactClient TOKEN = 'SecretToken' client = PactClient ( TOKEN )","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#5-easy-steps-for-integration","text":"Signup here Get your API token in account settings Connect WhatsApp or Instagram or anything here Setup webhooks using this doc Try to send or receive message","title":"5 easy steps for integration"},{"location":"getting-started/#installation","text":"pip install -U pact_im from pact_im import PactClient TOKEN = 'SecretToken' client = PactClient ( TOKEN )","title":"Installation"},{"location":"reference/attachment/","text":"Attachment upload_file ( self , company_id , conversation_id , * , url = None , file = None ) \u0421reates an attachment which can be sent in message https://pact-im.github.io/api-doc/#upload-attachments Parameters: Name Type Description Default company_id int required conversation_id int required url str None file Union[str, IO] None Returns: Type Description","title":"Attachment"},{"location":"reference/attachment/#attachment","text":"","title":"Attachment"},{"location":"reference/attachment/#pact_im.services.attachment.AttachmentService.upload_file","text":"\u0421reates an attachment which can be sent in message https://pact-im.github.io/api-doc/#upload-attachments Parameters: Name Type Description Default company_id int required conversation_id int required url str None file Union[str, IO] None Returns: Type Description","title":"upload_file()"},{"location":"reference/channels/","text":"Channels confirm_channel_code ( self , company_id , channel_id , provider , ** parameters ) https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required provider Union[str, pact_im.schema.enums.Provider] required parameters {} Returns: Type Description PactResponse confirm_instagram_code ( self , company_id , channel_id , confirmation_code ) https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required confirmation_code str required Returns: Type Description PactResponse confirm_instagram_two_factor_code ( self , company_id , channel_id , confirmation_code , confirmation_variant ) https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required confirmation_code str required confirmation_variant int required Returns: Type Description PactResponse create_channel_by_token ( self , company_id , provider , token ) This method create a new channel in the company using token. https://pact-im.github.io/api-doc/#create-new-channel List of supported channels that can be created by token you can see in link above Parameters: Name Type Description Default company_id int Id of the company required provider Union[str, pact_im.schema.enums.Provider] (facebook, viber, vk, ...) required token str required Returns: Type Description Optional[int] create_channel_instagram ( self , company_id , login , password , sync_messages_from = None , sync_comments = None ) This method create a new channel for Instagram Parameters: Name Type Description Default company_id int Id of the company required login str Instagram login required password str Instagram password required sync_messages_from Optional[datetime.datetime] Only messages created after will be synchronized None sync_comments Optional[bool] None Returns: Type Description Optional[int] create_channel_unified ( self , company_id , provider , ** options ) Unified method that can create channel in company. https://pact-im.github.io/api-doc/#create-new-channel Note: You can connect only one channel per one company for each provider. Contact with support if you want to use more than one channel Parameters: Name Type Description Default company_id int Id of the company required provider Union[str, pact_im.schema.enums.Provider] Provider required options {} sync_messages_from Only messages created after sync_messages_from will be synchronized required do_not_mark_as_read Do not mark chats as read after synchronization required sync_comments required login required password required token required Returns: Type Description Optional[int] create_channel_whatsapp ( self , company_id , sync_messages_from = None , do_not_mark_as_read = None ) This method create a new channel for WhatsApp https://pact-im.github.io/api-doc/#create-new-channel Parameters: Name Type Description Default company_id int Id of the company required sync_messages_from Optional[datetime.datetime] Only messages created after will be synchronized None do_not_mark_as_read Optional[bool] Do not mark chats as read after synchronization None Returns: Type Description Optional[int] delete_channel ( self , company_id , channel_id ) Method deletes (disables) the channel https://pact-im.github.io/api-doc/#delete-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required Returns: Type Description PactResponse get_channels ( self , company_id , from_ = None , per = None , sort = None ) This method returns all the company channels https://pact-im.github.io/api-doc/#get-all-channels Parameters: Name Type Description Default company_id int Id of the company required from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 None sort Union[str, pact_im.schema.enums.SortDirection] Change sorting direction (sorting by id). Avilable values: asc, desc. Default: asc. None Returns: Type Description ChannelList request_channel_code ( self , company_id , channel_id , provider , ** parameters ) https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required provider Union[str, pact_im.schema.enums.Provider] required parameters {} Returns: Type Description PactResponse request_instagram_code ( self , company_id , channel_id , challenge_variant ) https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required challenge_variant int required Returns: Type Description PactResponse request_instagram_two_factor_code ( self , company_id , channel_id ) https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required Returns: Type Description PactResponse send_first_whatsapp_message ( self , company_id , channel_id , phone , message ) Send first message to whatsapp https://pact-im.github.io/api-doc/#how-to-write-first-message-to-whatsapp Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required phone str Phone required message str Message required Returns: Type Description MessageResponse send_whatsapp_template_message ( self , company_id , channel_id , phone , template_id , template_language , template_parameters ) Send first message to whatsapp (business) https://pact-im.github.io/api-doc/#how-to-write-first-message-to-whatsapp-business Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required phone str Phone required template_id str required template_language str required template_parameters dict required Returns: Type Description MessageResponse update_channel ( self , company_id , channel_id , query = None , ** options ) This method updates existing channel in the company https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default query Optional[pydantic.main.BaseModel] None company_id int Id of the company required channel_id int Id of the channel required options {} Returns: Type Description Optional[int] update_channel_instagram ( self , company_id , channel_id , login , password ) This method updates instagramm channel https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required login str Instagram login required password str Instagram password required Returns: Type Description Optional[int] update_channel_token ( self , company_id , channel_id , token ) This method updates channels that using tokens to auth https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required token str required Returns: Type Description Optional[int]","title":"Channels"},{"location":"reference/channels/#channels","text":"","title":"Channels"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.confirm_channel_code","text":"https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required provider Union[str, pact_im.schema.enums.Provider] required parameters {} Returns: Type Description PactResponse","title":"confirm_channel_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.confirm_instagram_code","text":"https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required confirmation_code str required Returns: Type Description PactResponse","title":"confirm_instagram_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.confirm_instagram_two_factor_code","text":"https://pact-im.github.io/api-doc/#confirm-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required confirmation_code str required confirmation_variant int required Returns: Type Description PactResponse","title":"confirm_instagram_two_factor_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.create_channel_by_token","text":"This method create a new channel in the company using token. https://pact-im.github.io/api-doc/#create-new-channel List of supported channels that can be created by token you can see in link above Parameters: Name Type Description Default company_id int Id of the company required provider Union[str, pact_im.schema.enums.Provider] (facebook, viber, vk, ...) required token str required Returns: Type Description Optional[int]","title":"create_channel_by_token()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.create_channel_instagram","text":"This method create a new channel for Instagram Parameters: Name Type Description Default company_id int Id of the company required login str Instagram login required password str Instagram password required sync_messages_from Optional[datetime.datetime] Only messages created after will be synchronized None sync_comments Optional[bool] None Returns: Type Description Optional[int]","title":"create_channel_instagram()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.create_channel_unified","text":"Unified method that can create channel in company. https://pact-im.github.io/api-doc/#create-new-channel Note: You can connect only one channel per one company for each provider. Contact with support if you want to use more than one channel Parameters: Name Type Description Default company_id int Id of the company required provider Union[str, pact_im.schema.enums.Provider] Provider required options {} sync_messages_from Only messages created after sync_messages_from will be synchronized required do_not_mark_as_read Do not mark chats as read after synchronization required sync_comments required login required password required token required Returns: Type Description Optional[int]","title":"create_channel_unified()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.create_channel_whatsapp","text":"This method create a new channel for WhatsApp https://pact-im.github.io/api-doc/#create-new-channel Parameters: Name Type Description Default company_id int Id of the company required sync_messages_from Optional[datetime.datetime] Only messages created after will be synchronized None do_not_mark_as_read Optional[bool] Do not mark chats as read after synchronization None Returns: Type Description Optional[int]","title":"create_channel_whatsapp()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.delete_channel","text":"Method deletes (disables) the channel https://pact-im.github.io/api-doc/#delete-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required Returns: Type Description PactResponse","title":"delete_channel()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.get_channels","text":"This method returns all the company channels https://pact-im.github.io/api-doc/#get-all-channels Parameters: Name Type Description Default company_id int Id of the company required from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 None sort Union[str, pact_im.schema.enums.SortDirection] Change sorting direction (sorting by id). Avilable values: asc, desc. Default: asc. None Returns: Type Description ChannelList","title":"get_channels()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.request_channel_code","text":"https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required provider Union[str, pact_im.schema.enums.Provider] required parameters {} Returns: Type Description PactResponse","title":"request_channel_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.request_instagram_code","text":"https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required challenge_variant int required Returns: Type Description PactResponse","title":"request_instagram_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.request_instagram_two_factor_code","text":"https://pact-im.github.io/api-doc/#request-code-instagram-only Parameters: Name Type Description Default company_id int required channel_id int required Returns: Type Description PactResponse","title":"request_instagram_two_factor_code()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.send_first_whatsapp_message","text":"Send first message to whatsapp https://pact-im.github.io/api-doc/#how-to-write-first-message-to-whatsapp Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required phone str Phone required message str Message required Returns: Type Description MessageResponse","title":"send_first_whatsapp_message()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.send_whatsapp_template_message","text":"Send first message to whatsapp (business) https://pact-im.github.io/api-doc/#how-to-write-first-message-to-whatsapp-business Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required phone str Phone required template_id str required template_language str required template_parameters dict required Returns: Type Description MessageResponse","title":"send_whatsapp_template_message()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.update_channel","text":"This method updates existing channel in the company https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default query Optional[pydantic.main.BaseModel] None company_id int Id of the company required channel_id int Id of the channel required options {} Returns: Type Description Optional[int]","title":"update_channel()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.update_channel_instagram","text":"This method updates instagramm channel https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required login str Instagram login required password str Instagram password required Returns: Type Description Optional[int]","title":"update_channel_instagram()"},{"location":"reference/channels/#pact_im.services.channels.ChannelsService.update_channel_token","text":"This method updates channels that using tokens to auth https://pact-im.github.io/api-doc/#update-channel Parameters: Name Type Description Default company_id int Id of the company required channel_id int Id of the channel required token str required Returns: Type Description Optional[int]","title":"update_channel_token()"},{"location":"reference/companies/","text":"Companies create_company ( self , name , phone = None , description = None , webhook_url = None ) This method creates a new company for user :param name: Company name Parameters: Name Type Description Default phone Optional[str] Official company phone number of contact person None description Optional[str] Company description None webhook_url Optional[str] Endpoint for webhooks None Returns: Type Description Optional[int] Exceptions: Type Description exceptions.ApiCallException Api call error get_companies ( self , from_ = None , per = None , sort = None ) This method return list of all user companies Parameters: Name Type Description Default from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 None sort Union[str, pact_im.schema.enums.SortDirection] Change sorting direction. Available values: asc, desc. Default: asc None Returns: Type Description CompaniesList Exceptions: Type Description exceptions.ApiCallException Api call error update_company ( self , external_id , name = None , phone = None , description = None , webhook_url = None , hidden = None ) This method updates specific company attributes If you want to receive webhooks make sure that webhook_url is present. Webhook url must be valid and response code on POST json-request {'source':'pact.im', 'operation':'test'} must be 200 Parameters: Name Type Description Default external_id int Id of the company for update required name Optional[str] Company name None phone Optional[str] Official company phone number of contact person None description Optional[str] Company description None webhook_url Optional[str] Endpoint for webhooks None hidden Optional[bool] Hide/Show a company in the Pact web interface None Returns: Type Description Optional[int] Exceptions: Type Description exceptions.ApiCallException Api call error","title":"Companies"},{"location":"reference/companies/#companies","text":"","title":"Companies"},{"location":"reference/companies/#pact_im.services.companies.CompaniesService.create_company","text":"This method creates a new company for user :param name: Company name Parameters: Name Type Description Default phone Optional[str] Official company phone number of contact person None description Optional[str] Company description None webhook_url Optional[str] Endpoint for webhooks None Returns: Type Description Optional[int] Exceptions: Type Description exceptions.ApiCallException Api call error","title":"create_company()"},{"location":"reference/companies/#pact_im.services.companies.CompaniesService.get_companies","text":"This method return list of all user companies Parameters: Name Type Description Default from_ int Next page token geted from last request. Not valid or empty token return first page None per int Number of elements per page. Default: 50 None sort Union[str, pact_im.schema.enums.SortDirection] Change sorting direction. Available values: asc, desc. Default: asc None Returns: Type Description CompaniesList Exceptions: Type Description exceptions.ApiCallException Api call error","title":"get_companies()"},{"location":"reference/companies/#pact_im.services.companies.CompaniesService.update_company","text":"This method updates specific company attributes If you want to receive webhooks make sure that webhook_url is present. Webhook url must be valid and response code on POST json-request {'source':'pact.im', 'operation':'test'} must be 200 Parameters: Name Type Description Default external_id int Id of the company for update required name Optional[str] Company name None phone Optional[str] Official company phone number of contact person None description Optional[str] Company description None webhook_url Optional[str] Endpoint for webhooks None hidden Optional[bool] Hide/Show a company in the Pact web interface None Returns: Type Description Optional[int] Exceptions: Type Description exceptions.ApiCallException Api call error","title":"update_company()"},{"location":"reference/conversations/","text":"Conversation create_conversation ( self , company_id , phone , provider =< Provider . WhatsApp : 'whatsapp' > ) Creates new conversation This endpoint creates conversation in the company https://pact-im.github.io/api-doc/#create-new-conversation Parameters: Name Type Description Default company_id int required phone str required provider Union[str, pact_im.schema.enums.Provider] <Provider.WhatsApp: 'whatsapp'> Returns: Type Description ConversationResponse Exceptions: Type Description ValidationError pydantic.error_wrappers.ValidationError get_conversations ( self , company_id , from_ = None , per = None , sort = None ) Gets all conversations https://pact-im.github.io/api-doc/#get-all-conversations Parameters: Name Type Description Default company_id int required from_ int None per int None sort Union[str, pact_im.schema.enums.SortDirection] None Returns: Type Description ConversationList get_detail ( self , company_id , conversation_id ) Retrieves conversation details from server https://pact-im.github.io/api-doc/#get-conversation-details Parameters: Name Type Description Default company_id int required conversation_id int required Returns: Type Description ConversationResponse update_assignee ( self , company_id , conversation_id , assignee_id ) Update assignee for conversation This endpoint update assignee of conversation in the company using whatsapp channel https://pact-im.github.io/api-doc/#update-assignee-for-conversation Parameters: Name Type Description Default company_id int required conversation_id int required assignee_id int required Returns: Type Description Optional[int]","title":"Conversations"},{"location":"reference/conversations/#conversation","text":"","title":"Conversation"},{"location":"reference/conversations/#pact_im.services.conversations.ConversationsService.create_conversation","text":"Creates new conversation This endpoint creates conversation in the company https://pact-im.github.io/api-doc/#create-new-conversation Parameters: Name Type Description Default company_id int required phone str required provider Union[str, pact_im.schema.enums.Provider] <Provider.WhatsApp: 'whatsapp'> Returns: Type Description ConversationResponse Exceptions: Type Description ValidationError pydantic.error_wrappers.ValidationError","title":"create_conversation()"},{"location":"reference/conversations/#pact_im.services.conversations.ConversationsService.get_conversations","text":"Gets all conversations https://pact-im.github.io/api-doc/#get-all-conversations Parameters: Name Type Description Default company_id int required from_ int None per int None sort Union[str, pact_im.schema.enums.SortDirection] None Returns: Type Description ConversationList","title":"get_conversations()"},{"location":"reference/conversations/#pact_im.services.conversations.ConversationsService.get_detail","text":"Retrieves conversation details from server https://pact-im.github.io/api-doc/#get-conversation-details Parameters: Name Type Description Default company_id int required conversation_id int required Returns: Type Description ConversationResponse","title":"get_detail()"},{"location":"reference/conversations/#pact_im.services.conversations.ConversationsService.update_assignee","text":"Update assignee for conversation This endpoint update assignee of conversation in the company using whatsapp channel https://pact-im.github.io/api-doc/#update-assignee-for-conversation Parameters: Name Type Description Default company_id int required conversation_id int required assignee_id int required Returns: Type Description Optional[int]","title":"update_assignee()"},{"location":"reference/jobs/","text":"Jobs get_job ( self , company_id , channel_id , job_id ) This method return info about message delivery job https://pact-im.github.io/api-doc/?shell#message-delivery-jobs Parameters: Name Type Description Default company_id int required channel_id int required job_id int required Returns: Type Description MessageResponse","title":"Jobs"},{"location":"reference/jobs/#jobs","text":"","title":"Jobs"},{"location":"reference/jobs/#pact_im.services.jobs.JobsService.get_job","text":"This method return info about message delivery job https://pact-im.github.io/api-doc/?shell#message-delivery-jobs Parameters: Name Type Description Default company_id int required channel_id int required job_id int required Returns: Type Description MessageResponse","title":"get_job()"},{"location":"reference/messages/","text":"Messages get_messages ( self , company_id , conversation_id , from_ = None , per = None , sort = None ) Get conversation messages https://pact-im.github.io/api-doc/#get-conversation-messages Parameters: Name Type Description Default company_id int required conversation_id int required from_ Optional[int] None per Optional[int] None sort Union[str, pact_im.schema.enums.SortDirection] None Returns: Type Description MessageList send_message ( self , company_id , conversation_id , message = None , attachments = None ) Send message and/or attachments https://pact-im.github.io/api-doc/#send-message Parameters: Name Type Description Default company_id int required conversation_id int required message Optional[str] None attachments Optional[List[int]] attachments ids None Returns: Type Description","title":"Messages"},{"location":"reference/messages/#messages","text":"","title":"Messages"},{"location":"reference/messages/#pact_im.services.messages.MessagesService.get_messages","text":"Get conversation messages https://pact-im.github.io/api-doc/#get-conversation-messages Parameters: Name Type Description Default company_id int required conversation_id int required from_ Optional[int] None per Optional[int] None sort Union[str, pact_im.schema.enums.SortDirection] None Returns: Type Description MessageList","title":"get_messages()"},{"location":"reference/messages/#pact_im.services.messages.MessagesService.send_message","text":"Send message and/or attachments https://pact-im.github.io/api-doc/#send-message Parameters: Name Type Description Default company_id int required conversation_id int required message Optional[str] None attachments Optional[List[int]] attachments ids None Returns: Type Description","title":"send_message()"},{"location":"reference/service_messages/","text":"Service Messages","title":"ServiceMessages"},{"location":"reference/service_messages/#service-messages","text":"","title":"Service Messages"},{"location":"using/attachment/","text":"Attachment","title":"Attachment"},{"location":"using/attachment/#attachment","text":"","title":"Attachment"},{"location":"using/channels/","text":"Channels Get channels from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . channels . get_channels ( company_id = 1 ) for channel in response . channels : print ( channel . external_id , channel . provider ) Create new channel You can connect only one channel per one company for each provider. Contact with support if you want to use more than one channel import datetime from pact_im import PactClient from pact_im.schema import Provider client = PactClient ( 'SecretToken' ) external_id = client . channels . create_channel_unified ( company_id = 1 , provider = Provider . WhatsApp ) external_id_another = client . channels . create_channel_whatsapp ( company_id = 2 , sync_messages_from = datetime . datetime ( 2021 , 1 , 1 ) ) Update channel For instagram channel from pact_im import PactClient client = PactClient ( 'SecretToken' ) external_id = client . channels . update_channel_instagram ( company_id = 1 , channel_id = 1 , login = 'some_login' , password = 'some_password' ) For facebook/vkontakte/vkontakte_direct/telegram/viber channels from pact_im import PactClient client = PactClient ( 'SecretToken' ) # For instagram channel external_id = client . channels . update_channel_token ( company_id = 1 , channel_id = 1 , token = 'some_token' ) Delete channel from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . channels . delete_channel ( company_id = 1 , channel_id = 2 ) print ( response . is_success ())","title":"Channels"},{"location":"using/channels/#channels","text":"","title":"Channels"},{"location":"using/channels/#get-channels","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . channels . get_channels ( company_id = 1 ) for channel in response . channels : print ( channel . external_id , channel . provider )","title":"Get channels"},{"location":"using/channels/#create-new-channel","text":"You can connect only one channel per one company for each provider. Contact with support if you want to use more than one channel import datetime from pact_im import PactClient from pact_im.schema import Provider client = PactClient ( 'SecretToken' ) external_id = client . channels . create_channel_unified ( company_id = 1 , provider = Provider . WhatsApp ) external_id_another = client . channels . create_channel_whatsapp ( company_id = 2 , sync_messages_from = datetime . datetime ( 2021 , 1 , 1 ) )","title":"Create new channel"},{"location":"using/channels/#update-channel","text":"For instagram channel from pact_im import PactClient client = PactClient ( 'SecretToken' ) external_id = client . channels . update_channel_instagram ( company_id = 1 , channel_id = 1 , login = 'some_login' , password = 'some_password' ) For facebook/vkontakte/vkontakte_direct/telegram/viber channels from pact_im import PactClient client = PactClient ( 'SecretToken' ) # For instagram channel external_id = client . channels . update_channel_token ( company_id = 1 , channel_id = 1 , token = 'some_token' )","title":"Update channel"},{"location":"using/channels/#delete-channel","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) response = client . channels . delete_channel ( company_id = 1 , channel_id = 2 ) print ( response . is_success ())","title":"Delete channel"},{"location":"using/companies/","text":"Companies Get companies from pact_im import PactClient client = PactClient ( 'SecretToken' ) companies_result = client . companies . get_companies ( per = 100 ) for company in companies_result . companies : print ( company . name , company . description ) Update company from pact_im import PactClient client = PactClient ( 'SecretToken' ) updated_external_id = client . companies . update_company ( external_id = 1 , name = 'NewName' , description = 'NewDescription' ) Create new company from pact_im import PactClient client = PactClient ( 'SecretToken' ) created_external_id = client . companies . create_company ( name = 'MyCompany' , description = 'company description' , phone = '79250001122' , webhook_url = 'https://example.com' )","title":"Companies"},{"location":"using/companies/#companies","text":"","title":"Companies"},{"location":"using/companies/#get-companies","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) companies_result = client . companies . get_companies ( per = 100 ) for company in companies_result . companies : print ( company . name , company . description )","title":"Get companies"},{"location":"using/companies/#update-company","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) updated_external_id = client . companies . update_company ( external_id = 1 , name = 'NewName' , description = 'NewDescription' )","title":"Update company"},{"location":"using/companies/#create-new-company","text":"from pact_im import PactClient client = PactClient ( 'SecretToken' ) created_external_id = client . companies . create_company ( name = 'MyCompany' , description = 'company description' , phone = '79250001122' , webhook_url = 'https://example.com' )","title":"Create new company"},{"location":"using/conversations/","text":"Conversation","title":"Conversations"},{"location":"using/conversations/#conversation","text":"","title":"Conversation"},{"location":"using/jobs/","text":"Jobs","title":"Jobs"},{"location":"using/jobs/#jobs","text":"","title":"Jobs"},{"location":"using/messages/","text":"Messages","title":"Messages"},{"location":"using/messages/#messages","text":"","title":"Messages"},{"location":"using/service_messages/","text":"Service Messages","title":"ServiceMessages"},{"location":"using/service_messages/#service-messages","text":"","title":"Service Messages"}]}